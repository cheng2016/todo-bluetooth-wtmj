package com.wistron.swpc.android.WiTMJ.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wistron.swpc.android.WiTMJ.bean.DbWorkOut;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_WORK_OUT".
*/
public class DbWorkOutDao extends AbstractDao<DbWorkOut, Long> {

    public static final String TABLENAME = "DB_WORK_OUT";

    /**
     * Properties of entity DbWorkOut.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WorkoutId = new Property(1, String.class, "workoutId", false, "WORKOUT_ID");
        public final static Property RecordId = new Property(2, String.class, "recordId", false, "RECORD_ID");
        public final static Property JsonStr = new Property(3, String.class, "jsonStr", false, "JSON_STR");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
    };

    private DaoSession daoSession;


    public DbWorkOutDao(DaoConfig config) {
        super(config);
    }
    
    public DbWorkOutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_WORK_OUT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WORKOUT_ID\" TEXT," + // 1: workoutId
                "\"RECORD_ID\" TEXT," + // 2: recordId
                "\"JSON_STR\" TEXT," + // 3: jsonStr
                "\"STATUS\" INTEGER);"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_WORK_OUT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbWorkOut entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String workoutId = entity.getWorkoutId();
        if (workoutId != null) {
            stmt.bindString(2, workoutId);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(3, recordId);
        }
 
        String jsonStr = entity.getJsonStr();
        if (jsonStr != null) {
            stmt.bindString(4, jsonStr);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
    }

    @Override
    protected void attachEntity(DbWorkOut entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbWorkOut readEntity(Cursor cursor, int offset) {
        DbWorkOut entity = new DbWorkOut( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // workoutId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // recordId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jsonStr
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbWorkOut entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWorkoutId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRecordId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJsonStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbWorkOut entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbWorkOut entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
