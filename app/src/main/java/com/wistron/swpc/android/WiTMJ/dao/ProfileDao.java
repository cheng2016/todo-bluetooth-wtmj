package com.wistron.swpc.android.WiTMJ.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.wistron.swpc.android.WiTMJ.bean.Profile;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROFILE".
*/
public class ProfileDao extends AbstractDao<Profile, String> {

    public static final String TABLENAME = "PROFILE";

    /**
     * Properties of entity Profile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Profile_id = new Property(0, String.class, "profile_id", true, "PROFILE_ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property Weight = new Property(3, Integer.class, "weight", false, "WEIGHT");
        public final static Property Height = new Property(4, Integer.class, "height", false, "HEIGHT");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property Birthday = new Property(6, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Image_url = new Property(7, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Image_sas = new Property(8, String.class, "image_sas", false, "IMAGE_SAS");
        public final static Property Createdat = new Property(9, String.class, "createdat", false, "CREATEDAT");
    };

    private DaoSession daoSession;


    public ProfileDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROFILE\" (" + //
                "\"PROFILE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: profile_id
                "\"USERNAME\" TEXT," + // 1: username
                "\"EMAIL\" TEXT," + // 2: email
                "\"WEIGHT\" INTEGER," + // 3: weight
                "\"HEIGHT\" INTEGER," + // 4: height
                "\"GENDER\" INTEGER," + // 5: gender
                "\"BIRTHDAY\" TEXT," + // 6: birthday
                "\"IMAGE_URL\" TEXT," + // 7: image_url
                "\"IMAGE_SAS\" TEXT," + // 8: image_sas
                "\"CREATEDAT\" TEXT);"); // 9: createdat
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROFILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Profile entity) {
        stmt.clearBindings();
 
        String profile_id = entity.getProfile_id();
        if (profile_id != null) {
            stmt.bindString(1, profile_id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(4, weight);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(5, height);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(7, birthday);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(8, image_url);
        }
 
        String image_sas = entity.getImage_sas();
        if (image_sas != null) {
            stmt.bindString(9, image_sas);
        }
 
        String createdat = entity.getCreatedat();
        if (createdat != null) {
            stmt.bindString(10, createdat);
        }
    }

    @Override
    protected void attachEntity(Profile entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Profile readEntity(Cursor cursor, int offset) {
        Profile entity = new Profile( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // profile_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // weight
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // height
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // birthday
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // image_url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // image_sas
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // createdat
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Profile entity, int offset) {
        entity.setProfile_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeight(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setHeight(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBirthday(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImage_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImage_sas(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatedat(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Profile entity, long rowId) {
        return entity.getProfile_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Profile entity) {
        if(entity != null) {
            return entity.getProfile_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
