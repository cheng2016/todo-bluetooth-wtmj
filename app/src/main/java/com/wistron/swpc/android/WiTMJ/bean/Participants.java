package com.wistron.swpc.android.WiTMJ.bean;

import com.google.gson.annotations.SerializedName;
import com.wistron.swpc.android.WiTMJ.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.wistron.swpc.android.WiTMJ.dao.ParticipantsDao;
import com.wistron.swpc.android.WiTMJ.dao.WorkOutDao;

import java.io.Serializable;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PARTICIPANTS".
 */
public class Participants implements Serializable{
    @SerializedName("pid")
    private Long id;
    @SerializedName("id")
    private String user_id;
    private String username;
    private String invitation;
    private String record_id;
    private String workout_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParticipantsDao myDao;

    private WorkOut workOut;
    private String workOut__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Participants() {
    }

    public Participants(Long id) {
        this.id = id;
    }

    public Participants(Long id, String user_id, String username, String invitation, String record_id, String workout_id) {
        this.id = id;
        this.user_id = user_id;
        this.username = username;
        this.invitation = invitation;
        this.record_id = record_id;
        this.workout_id = workout_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParticipantsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUser_id() {
        return user_id;
    }

    public void setUser_id(String user_id) {
        this.user_id = user_id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getInvitation() {
        return invitation;
    }

    public void setInvitation(String invitation) {
        this.invitation = invitation;
    }

    public String getRecord_id() {
        return record_id;
    }

    public void setRecord_id(String record_id) {
        this.record_id = record_id;
    }

    public String getWorkout_id() {
        return workout_id;
    }

    public void setWorkout_id(String workout_id) {
        this.workout_id = workout_id;
    }

    /** To-one relationship, resolved on first access. */
    public WorkOut getWorkOut() {
        String __key = this.workout_id;
        if (workOut__resolvedKey == null || workOut__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WorkOutDao targetDao = daoSession.getWorkOutDao();
            WorkOut workOutNew = targetDao.load(__key);
            synchronized (this) {
                workOut = workOutNew;
            	workOut__resolvedKey = __key;
            }
        }
        return workOut;
    }

    public void setWorkOut(WorkOut workOut) {
        synchronized (this) {
            this.workOut = workOut;
            workout_id = workOut == null ? null : workOut.getWorkout_id();
            workOut__resolvedKey = workout_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
