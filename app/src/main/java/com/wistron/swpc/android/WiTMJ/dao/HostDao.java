package com.wistron.swpc.android.WiTMJ.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.wistron.swpc.android.WiTMJ.bean.Host;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOST".
*/
public class HostDao extends AbstractDao<Host, String> {

    public static final String TABLENAME = "HOST";

    /**
     * Properties of entity Host.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Host_id = new Property(0, String.class, "host_id", true, "HOST_ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Image_url = new Property(2, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
    };

    private DaoSession daoSession;


    public HostDao(DaoConfig config) {
        super(config);
    }
    
    public HostDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOST\" (" + //
                "\"HOST_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: host_id
                "\"USERNAME\" TEXT," + // 1: username
                "\"IMAGE_URL\" TEXT," + // 2: image_url
                "\"EMAIL\" TEXT);"); // 3: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Host entity) {
        stmt.clearBindings();
 
        String host_id = entity.getHost_id();
        if (host_id != null) {
            stmt.bindString(1, host_id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(3, image_url);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
    }

    @Override
    protected void attachEntity(Host entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Host readEntity(Cursor cursor, int offset) {
        Host entity = new Host( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // host_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Host entity, int offset) {
        entity.setHost_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Host entity, long rowId) {
        return entity.getHost_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Host entity) {
        if(entity != null) {
            return entity.getHost_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
