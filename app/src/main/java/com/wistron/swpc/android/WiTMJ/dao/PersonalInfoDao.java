package com.wistron.swpc.android.WiTMJ.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.wistron.swpc.android.WiTMJ.bean.PersonalInfo;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSONAL_INFO".
*/
public class PersonalInfoDao extends AbstractDao<PersonalInfo, Long> {

    public static final String TABLENAME = "PERSONAL_INFO";

    /**
     * Properties of entity PersonalInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Tag = new Property(2, Integer.class, "tag", false, "TAG");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property DateOfBirth = new Property(4, String.class, "dateOfBirth", false, "DATE_OF_BIRTH");
        public final static Property Height = new Property(5, Long.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(6, Long.class, "weight", false, "WEIGHT");
        public final static Property Gender = new Property(7, String.class, "gender", false, "GENDER");
    };


    public PersonalInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PersonalInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSONAL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USERNAME\" TEXT NOT NULL ," + // 1: username
                "\"TAG\" INTEGER," + // 2: tag
                "\"EMAIL\" TEXT," + // 3: email
                "\"DATE_OF_BIRTH\" TEXT," + // 4: dateOfBirth
                "\"HEIGHT\" INTEGER," + // 5: height
                "\"WEIGHT\" INTEGER," + // 6: weight
                "\"GENDER\" TEXT);"); // 7: gender
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSONAL_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PersonalInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(3, tag);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String dateOfBirth = entity.getDateOfBirth();
        if (dateOfBirth != null) {
            stmt.bindString(5, dateOfBirth);
        }
 
        Long height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(6, height);
        }
 
        Long weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(7, weight);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PersonalInfo readEntity(Cursor cursor, int offset) {
        PersonalInfo entity = new PersonalInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // tag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dateOfBirth
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // height
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // weight
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // gender
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PersonalInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDateOfBirth(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeight(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setWeight(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setGender(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PersonalInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PersonalInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
