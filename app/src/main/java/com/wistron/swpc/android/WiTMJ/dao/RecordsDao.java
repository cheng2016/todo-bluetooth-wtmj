package com.wistron.swpc.android.WiTMJ.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.wistron.swpc.android.WiTMJ.bean.Records;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORDS".
*/
public class RecordsDao extends AbstractDao<Records, String> {

    public static final String TABLENAME = "RECORDS";

    /**
     * Properties of entity Records.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Record_id = new Property(0, String.class, "record_id", true, "RECORD_ID");
        public final static Property Workout_id = new Property(1, String.class, "workout_id", false, "WORKOUT_ID");
        public final static Property Tag = new Property(2, Integer.class, "tag", false, "TAG");
        public final static Property Invitation = new Property(3, Integer.class, "invitation", false, "INVITATION");
        public final static Property Start_time = new Property(4, String.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(5, String.class, "end_time", false, "END_TIME");
        public final static Property Duration = new Property(6, String.class, "duration", false, "DURATION");
        public final static Property Distance = new Property(7, String.class, "distance", false, "DISTANCE");
        public final static Property Calories = new Property(8, String.class, "calories", false, "CALORIES");
        public final static Property Avg_speed = new Property(9, String.class, "avg_speed", false, "AVG_SPEED");
        public final static Property Rank = new Property(10, Integer.class, "rank", false, "RANK");
        public final static Property Routes = new Property(11, String.class, "routes", false, "ROUTES");
    };

    private DaoSession daoSession;


    public RecordsDao(DaoConfig config) {
        super(config);
    }
    
    public RecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORDS\" (" + //
                "\"RECORD_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: record_id
                "\"WORKOUT_ID\" TEXT," + // 1: workout_id
                "\"TAG\" INTEGER," + // 2: tag
                "\"INVITATION\" INTEGER," + // 3: invitation
                "\"START_TIME\" TEXT," + // 4: start_time
                "\"END_TIME\" TEXT," + // 5: end_time
                "\"DURATION\" TEXT," + // 6: duration
                "\"DISTANCE\" TEXT," + // 7: distance
                "\"CALORIES\" TEXT," + // 8: calories
                "\"AVG_SPEED\" TEXT," + // 9: avg_speed
                "\"RANK\" INTEGER," + // 10: rank
                "\"ROUTES\" TEXT);"); // 11: routes
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORDS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Records entity) {
        stmt.clearBindings();
 
        String record_id = entity.getRecord_id();
        if (record_id != null) {
            stmt.bindString(1, record_id);
        }
 
        String workout_id = entity.getWorkout_id();
        if (workout_id != null) {
            stmt.bindString(2, workout_id);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(3, tag);
        }
 
        Integer invitation = entity.getInvitation();
        if (invitation != null) {
            stmt.bindLong(4, invitation);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(5, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(6, end_time);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(7, duration);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(8, distance);
        }
 
        String calories = entity.getCalories();
        if (calories != null) {
            stmt.bindString(9, calories);
        }
 
        String avg_speed = entity.getAvg_speed();
        if (avg_speed != null) {
            stmt.bindString(10, avg_speed);
        }

        Integer rank = entity.getRank();
        if (rank != null) {
            stmt.bindLong(11, rank);
        }
 
        String routes = entity.getRoutes();
        if (routes != null) {
            stmt.bindString(12, routes);
        }
    }

    @Override
    protected void attachEntity(Records entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Records readEntity(Cursor cursor, int offset) {
        Records entity = new Records( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // record_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // workout_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // tag
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // invitation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // start_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // end_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // distance
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // calories
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // avg_speed
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // rank
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // routes
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Records entity, int offset) {
        entity.setRecord_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWorkout_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setInvitation(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setStart_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnd_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDistance(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCalories(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAvg_speed(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRank(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setRoutes(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Records entity, long rowId) {
        return entity.getRecord_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Records entity) {
        if(entity != null) {
            return entity.getRecord_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    protected List<Records> getRecordsByDate(Date startDate, Date endDate){
        List<Records> recordsList = new ArrayList<Records>();

        return recordsList;
    }

}
