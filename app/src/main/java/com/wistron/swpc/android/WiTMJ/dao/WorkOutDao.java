package com.wistron.swpc.android.WiTMJ.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.wistron.swpc.android.WiTMJ.bean.Host;

import com.wistron.swpc.android.WiTMJ.bean.WorkOut;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORK_OUT".
*/
public class WorkOutDao extends AbstractDao<WorkOut, String> {

    public static final String TABLENAME = "WORK_OUT";

    /**
     * Properties of entity WorkOut.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Workout_id = new Property(0, String.class, "workout_id", true, "WORKOUT_ID");
        public final static Property Tag = new Property(1, Integer.class, "tag", false, "TAG");
        public final static Property Permission = new Property(2, Integer.class, "permission", false, "PERMISSION");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Start_date = new Property(4, String.class, "start_date", false, "START_DATE");
        public final static Property End_date = new Property(5, String.class, "end_date", false, "END_DATE");
        public final static Property Start_location = new Property(6, String.class, "start_location", false, "START_LOCATION");
        public final static Property End_location = new Property(7, String.class, "end_location", false, "END_LOCATION");
        public final static Property Route = new Property(8, String.class, "route", false, "ROUTE");
        public final static Property Note = new Property(9, String.class, "note", false, "NOTE");
        public final static Property Custom_cal = new Property(10, String.class, "custom_cal", false, "CUSTOM_CAL");
        public final static Property Custom_distance = new Property(11, String.class, "custom_distance", false, "CUSTOM_DISTANCE");
        public final static Property Custom_speed = new Property(12, String.class, "custom_speed", false, "CUSTOM_SPEED");
        public final static Property Custom_duration = new Property(13, String.class, "custom_duration", false, "CUSTOM_DURATION");
        public final static Property Host_id = new Property(14, String.class, "host_id", false, "HOST_ID");
    };

    private DaoSession daoSession;

    private Query<WorkOut> host_WorkoutQuery;

    public WorkOutDao(DaoConfig config) {
        super(config);
    }
    
    public WorkOutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORK_OUT\" (" + //
                "\"WORKOUT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: workout_id
                "\"TAG\" INTEGER," + // 1: tag
                "\"PERMISSION\" INTEGER," + // 2: permission
                "\"NAME\" TEXT," + // 3: name
                "\"START_DATE\" TEXT," + // 4: start_date
                "\"END_DATE\" TEXT," + // 5: end_date
                "\"START_LOCATION\" TEXT," + // 6: start_location
                "\"END_LOCATION\" TEXT," + // 7: end_location
                "\"ROUTE\" TEXT," + // 8: route
                "\"NOTE\" TEXT," + // 9: note
                "\"CUSTOM_CAL\" TEXT," + // 10: custom_cal
                "\"CUSTOM_DISTANCE\" TEXT," + // 11: custom_distance
                "\"CUSTOM_SPEED\" TEXT," + // 12: custom_speed
                "\"CUSTOM_DURATION\" TEXT," + // 13: custom_duration
                "\"HOST_ID\" TEXT);"); // 14: host_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORK_OUT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WorkOut entity) {
        stmt.clearBindings();
 
        String workout_id = entity.getWorkout_id();
        if (workout_id != null) {
            stmt.bindString(1, workout_id);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(2, tag);
        }
 
        Integer permission = entity.getPermission();
        if (permission != null) {
            stmt.bindLong(3, permission);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String start_date = entity.getStart_date();
        if (start_date != null) {
            stmt.bindString(5, start_date);
        }
 
        String end_date = entity.getEnd_date();
        if (end_date != null) {
            stmt.bindString(6, end_date);
        }
 
        String start_location = entity.getStart_location();
        if (start_location != null) {
            stmt.bindString(7, start_location);
        }
 
        String end_location = entity.getEnd_location();
        if (end_location != null) {
            stmt.bindString(8, end_location);
        }
 
        String route = entity.getRoute();
        if (route != null) {
            stmt.bindString(9, route);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
 
        String custom_cal = entity.getCustom_cal();
        if (custom_cal != null) {
            stmt.bindString(11, custom_cal);
        }
 
        String custom_distance = entity.getCustom_distance();
        if (custom_distance != null) {
            stmt.bindString(12, custom_distance);
        }
 
        String custom_speed = entity.getCustom_speed();
        if (custom_speed != null) {
            stmt.bindString(13, custom_speed);
        }
 
        String custom_duration = entity.getCustom_duration();
        if (custom_duration != null) {
            stmt.bindString(14, custom_duration);
        }
 
        String host_id = entity.getHost_id();
        if (host_id != null) {
            stmt.bindString(15, host_id);
        }
    }

    @Override
    protected void attachEntity(WorkOut entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WorkOut readEntity(Cursor cursor, int offset) {
        WorkOut entity = new WorkOut( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // workout_id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // tag
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // permission
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // start_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // end_date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // start_location
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // end_location
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // route
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // note
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // custom_cal
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // custom_distance
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // custom_speed
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // custom_duration
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // host_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WorkOut entity, int offset) {
        entity.setWorkout_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTag(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPermission(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStart_date(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEnd_date(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStart_location(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEnd_location(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRoute(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCustom_cal(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCustom_distance(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCustom_speed(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCustom_duration(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHost_id(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(WorkOut entity, long rowId) {
        return entity.getWorkout_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(WorkOut entity) {
        if(entity != null) {
            return entity.getWorkout_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "workout" to-many relationship of Host. */
    public List<WorkOut> _queryHost_Workout(String host_id) {
        synchronized (this) {
            if (host_WorkoutQuery == null) {
                QueryBuilder<WorkOut> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Host_id.eq(null));
                host_WorkoutQuery = queryBuilder.build();
            }
        }
        Query<WorkOut> query = host_WorkoutQuery.forCurrentThread();
        query.setParameter(0, host_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getHostDao().getAllColumns());
            builder.append(" FROM WORK_OUT T");
            builder.append(" LEFT JOIN HOST T0 ON T.\"HOST_ID\"=T0.\"HOST_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected WorkOut loadCurrentDeep(Cursor cursor, boolean lock) {
        WorkOut entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Host host = loadCurrentOther(daoSession.getHostDao(), cursor, offset);
        entity.setHost(host);

        return entity;    
    }

    public WorkOut loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<WorkOut> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<WorkOut> list = new ArrayList<WorkOut>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<WorkOut> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<WorkOut> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
