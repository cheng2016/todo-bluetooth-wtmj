package com.wistron.swpc.android.WiTMJ.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.wistron.swpc.android.WiTMJ.bean.Training;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAINING".
*/
public class TrainingDao extends AbstractDao<Training, Long> {

    public static final String TABLENAME = "TRAINING";

    /**
     * Properties of entity Training.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Tag = new Property(2, Integer.class, "tag", false, "TAG");
        public final static Property StartRoute = new Property(3, String.class, "startRoute", false, "START_ROUTE");
        public final static Property EndRoute = new Property(4, String.class, "endRoute", false, "END_ROUTE");
        public final static Property Duration = new Property(5, java.util.Date.class, "duration", false, "DURATION");
        public final static Property Speed = new Property(6, Long.class, "speed", false, "SPEED");
        public final static Property Distance = new Property(7, Float.class, "distance", false, "DISTANCE");
        public final static Property Calories = new Property(8, Long.class, "calories", false, "CALORIES");
    };


    public TrainingDao(DaoConfig config) {
        super(config);
    }
    
    public TrainingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAINING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT NOT NULL ," + // 1: userId
                "\"TAG\" INTEGER," + // 2: tag
                "\"START_ROUTE\" TEXT," + // 3: startRoute
                "\"END_ROUTE\" TEXT," + // 4: endRoute
                "\"DURATION\" INTEGER," + // 5: duration
                "\"SPEED\" INTEGER," + // 6: speed
                "\"DISTANCE\" REAL," + // 7: distance
                "\"CALORIES\" INTEGER);"); // 8: calories
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAINING\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Training entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(3, tag);
        }
 
        String startRoute = entity.getStartRoute();
        if (startRoute != null) {
            stmt.bindString(4, startRoute);
        }
 
        String endRoute = entity.getEndRoute();
        if (endRoute != null) {
            stmt.bindString(5, endRoute);
        }
 
        java.util.Date duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(6, duration.getTime());
        }
 
        Long speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindLong(7, speed);
        }
 
        Float distance = entity.getDistance();
        if (distance != null) {
            stmt.bindDouble(8, distance);
        }
 
        Long calories = entity.getCalories();
        if (calories != null) {
            stmt.bindLong(9, calories);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Training readEntity(Cursor cursor, int offset) {
        Training entity = new Training( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // tag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startRoute
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // endRoute
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // duration
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // speed
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // distance
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // calories
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Training entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setStartRoute(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndRoute(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setSpeed(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDistance(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setCalories(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Training entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Training entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
