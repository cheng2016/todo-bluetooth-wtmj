package com.wistron.swpc.android.WiTMJ.bean;

import com.google.gson.annotations.SerializedName;
import com.wistron.swpc.android.WiTMJ.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.wistron.swpc.android.WiTMJ.dao.RecordsDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "RECORDS".
 */
public class Records {

    private String workout_id;
    private Integer tag;
    private Integer invitation;
    private String start_time;
    private String end_time;
    private String duration;
    private String distance;
    private String calories;
    private String avg_speed;
    private Integer rank;
    private String routes;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RecordsDao myDao;


    // KEEP FIELDS - put your custom fields here
    @SerializedName("id")
    private String record_id;
    // KEEP FIELDS END

    public Records() {
    }

    public Records(String record_id) {
        this.record_id = record_id;
    }

    public Records(String record_id, String workout_id, Integer tag, Integer invitation, String start_time, String end_time, String duration, String distance, String calories, String avg_speed, Integer rank, String routes) {
        this.record_id = record_id;
        this.workout_id = workout_id;
        this.tag = tag;
        this.invitation = invitation;
        this.start_time = start_time;
        this.end_time = end_time;
        this.duration = duration;
        this.distance = distance;
        this.calories = calories;
        this.avg_speed = avg_speed;
        this.rank = rank;
        this.routes = routes;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRecordsDao() : null;
    }

    public String getRecord_id() {
        return record_id;
    }

    public void setRecord_id(String record_id) {
        this.record_id = record_id;
    }

    public String getWorkout_id() {
        return workout_id;
    }

    public void setWorkout_id(String workout_id) {
        this.workout_id = workout_id;
    }

    public Integer getTag() {
        return tag;
    }

    public void setTag(Integer tag) {
        this.tag = tag;
    }

    public Integer getInvitation() {
        return invitation;
    }

    public void setInvitation(Integer invitation) {
        this.invitation = invitation;
    }

    public String getStart_time() {
        return start_time;
    }

    public void setStart_time(String start_time) {
        this.start_time = start_time;
    }

    public String getEnd_time() {
        return end_time;
    }

    public void setEnd_time(String end_time) {
        this.end_time = end_time;
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public String getDistance() {
        return distance;
    }

    public void setDistance(String distance) {
        this.distance = distance;
    }

    public String getCalories() {
        return calories;
    }

    public void setCalories(String calories) {
        this.calories = calories;
    }

    public String getAvg_speed() {
        return avg_speed;
    }

    public void setAvg_speed(String avg_speed) {
        this.avg_speed = avg_speed;
    }

    public Integer getRank() {
        return rank;
    }

    public void setRank(Integer rank) {
        this.rank = rank;
    }

    public String getRoutes() {
        return routes;
    }

    public void setRoutes(String routes) {
        this.routes = routes;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
