package com.wistron.swpc.android.WiTMJ.bean;

import java.util.List;

import com.google.gson.annotations.SerializedName;
import com.wistron.swpc.android.WiTMJ.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.wistron.swpc.android.WiTMJ.dao.HostDao;
import com.wistron.swpc.android.WiTMJ.dao.ParticipantsDao;
import com.wistron.swpc.android.WiTMJ.dao.WorkOutDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "WORK_OUT".
 */
public class WorkOut {

    private Integer tag;
    private Integer permission;
    private String name;
    private String start_date;
    private String end_date;
    private String start_location;
    private String end_location;
    private String route;
    private String note;
    private String custom_cal;
    private String custom_distance;
    private String custom_speed;
    private String custom_duration;
    private String host_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WorkOutDao myDao;

    private Host host;
    private String host__resolvedKey;

    private List<Participants> participants;

    // KEEP FIELDS - put your custom fields here
    @SerializedName("id")
    private String workout_id;
    // KEEP FIELDS END

    public WorkOut() {
    }

    public WorkOut(String workout_id) {
        this.workout_id = workout_id;
    }

    public WorkOut(String workout_id, Integer tag, Integer permission, String name, String start_date, String end_date, String start_location, String end_location, String route, String note, String custom_cal, String custom_distance, String custom_speed, String custom_duration, String host_id) {
        this.workout_id = workout_id;
        this.tag = tag;
        this.permission = permission;
        this.name = name;
        this.start_date = start_date;
        this.end_date = end_date;
        this.start_location = start_location;
        this.end_location = end_location;
        this.route = route;
        this.note = note;
        this.custom_cal = custom_cal;
        this.custom_distance = custom_distance;
        this.custom_speed = custom_speed;
        this.custom_duration = custom_duration;
        this.host_id = host_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWorkOutDao() : null;
    }

    public String getWorkout_id() {
        return workout_id;
    }

    public void setWorkout_id(String workout_id) {
        this.workout_id = workout_id;
    }

    public Integer getTag() {
        return tag;
    }

    public void setTag(Integer tag) {
        this.tag = tag;
    }

    public Integer getPermission() {
        return permission;
    }

    public void setPermission(Integer permission) {
        this.permission = permission;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getStart_date() {
        return start_date;
    }

    public void setStart_date(String start_date) {
        this.start_date = start_date;
    }

    public String getEnd_date() {
        return end_date;
    }

    public void setEnd_date(String end_date) {
        this.end_date = end_date;
    }

    public String getStart_location() {
        return start_location;
    }

    public void setStart_location(String start_location) {
        this.start_location = start_location;
    }

    public String getEnd_location() {
        return end_location;
    }

    public void setEnd_location(String end_location) {
        this.end_location = end_location;
    }

    public String getRoute() {
        return route;
    }

    public void setRoute(String route) {
        this.route = route;
    }

    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    public String getCustom_cal() {
        return custom_cal;
    }

    public void setCustom_cal(String custom_cal) {
        this.custom_cal = custom_cal;
    }

    public String getCustom_distance() {
        return custom_distance;
    }

    public void setCustom_distance(String custom_distance) {
        this.custom_distance = custom_distance;
    }

    public String getCustom_speed() {
        return custom_speed;
    }

    public void setCustom_speed(String custom_speed) {
        this.custom_speed = custom_speed;
    }

    public String getCustom_duration() {
        return custom_duration;
    }

    public void setCustom_duration(String custom_duration) {
        this.custom_duration = custom_duration;
    }

    public String getHost_id() {
        return host_id;
    }

    public void setHost_id(String host_id) {
        this.host_id = host_id;
    }

    /** To-one relationship, resolved on first access. */
    public Host getHost() {
        String __key = this.host_id;
        if (host__resolvedKey == null || host__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HostDao targetDao = daoSession.getHostDao();
            Host hostNew = targetDao.load(__key);
            synchronized (this) {
                host = hostNew;
            	host__resolvedKey = __key;
            }
        }
        return host;
    }

    public void setHost(Host host) {
        synchronized (this) {
            this.host = host;
            host_id = host == null ? null : host.getHost_id();
            host__resolvedKey = host_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Participants> getParticipants() {
        if (participants == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ParticipantsDao targetDao = daoSession.getParticipantsDao();
            List<Participants> participantsNew = targetDao._queryWorkOut_Participants(workout_id);
            synchronized (this) {
                if(participants == null) {
                    participants = participantsNew;
                }
            }
        }
        return participants;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetParticipants() {
        participants = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
